import random
import os
import cv2
import numpy as np
import matplotlib.pyplot as plt
import yaml
from ultralytics import YOLO

# Si bien dice 10epocas realmente se entrenó con 25 épocas, solo que ya usé ese nombre para todo el codigo   
model = YOLO("C:/Users/Francesco/Desktop/ModelDetectorDeComp10epocas.pt")

# Cargar el archivo data.yaml para obtener la información de todas las clases
with open("C:/Users/Francesco/Desktop/PCBDETECTOR10CLASES/data.yaml", "r") as f:
    data = yaml.safe_load(f)

# Obtengo las clases desde el archivo data.yaml y las abrevio
class_names = data['names']
class_abbr = {
    "bead": "bd",
    "capacitor": "cap",
    "connector": "con",
    "crystal": "crys",
    "ic": "ic",
    "inductor": "ind",
    "led": "led",
    "resistor": "res",
    "semiconductor": "semi",
    "switch": "sw"
}
class_abbreviated_names = [class_abbr.get(name, name) for name in class_names]

# Directorios de imágenes y etiquetas de prueba
test_images_path = "C:/Users/Francesco/Desktop/PCBDETECTOR10CLASES/test/images"
test_labels_path = "C:/Users/Francesco/Desktop/PCBDETECTOR10CLASES/test/labels"
output_path = "C:/Users/Francesco/Desktop/Detector de componentes/ResultadosFinales"

# Crear el directorio de salida si no existe (basicamente puedo crear muchas carpetas sin que se sobreescriban cada vez que ejecuto el codigo)
os.makedirs(output_path, exist_ok=True)

# Seleccionar aleatoriamente 50 imágenes
image_files = os.listdir(test_images_path)
random_images = random.sample(image_files, 50)

# Procesar cada imagen seleccionada aleatoriamente
for idx, image_file in enumerate(random_images):
    image_path = os.path.join(test_images_path, image_file)
    label_path = os.path.join(test_labels_path, image_file.replace(".jpg", ".txt"))

    # Leer la imagen
    img_true = cv2.imread(image_path)
    img_true = cv2.cvtColor(img_true, cv2.COLOR_BGR2RGB)
    img_pred = img_true.copy()
    img_h, img_w, _ = img_true.shape

    # Dibujar etiquetas verdaderas en las imagenes que se que son "correctas" segun los parametros del dataset
    if os.path.exists(label_path):
        with open(label_path, "r") as f:
            for line in f:
                label_info = line.strip().split()
                true_class_id = int(label_info[0])
                x_center, y_center, width, height = map(float, label_info[1:])

                # Convertir coordenadas normalizadas a píxeles
                x_center, y_center = int(x_center * img_w), int(y_center * img_h)
                width, height = int(width * img_w), int(height * img_h)
                top_left = (x_center - width // 2, y_center - height // 2)
                bottom_right = (x_center + width // 2, y_center + height // 2)

                # Etiqueta verdadera abreviada (para que no se superponga con otras etiquetas ya que en las imagenes normalmente aparecen muchos componentes uno al lado del otro
                true_label = f"{class_abbreviated_names[true_class_id]}"
                cv2.rectangle(img_true, top_left, bottom_right, (255, 0, 0), 1)  # rojo
                cv2.putText(img_true, true_label, (top_left[0], top_left[1] - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 0, 255), 1)

    # Realizar predicción en la imagen y dibujar en la imagen predicha
    results = model(image_path)
    pred_labels_positions = []  # Para almacenar posiciones de etiquetas predichas
    for pred in results[0].boxes:
        x1, y1, x2, y2 = map(int, pred.xyxy[0])
        pred_class_id = int(pred.cls[0])
        confidence = int(pred.conf[0] * 100)  # Convertir a entero
        pred_label = f"{class_abbreviated_names[pred_class_id]} {confidence}%"  # Solo dos dígitos (para justamente no ocupar mucho espacio y no se superponga con otras)

        # Verificar solapamiento de etiquetas
        position = (x1, y1 - 5)
        overlap = False

        for pos in pred_labels_positions:
            if abs(pos[0] - position[0]) < 50 and abs(pos[1] - position[1]) < 10:  
                overlap = True
                break

        # Ajustar la posición de la etiqueta si hay solapamiento
        if overlap:
            position = (x1, y1 - 20)  # Desplazar hacia abajo si hay solapamiento

        # Dibujar etiquetas predichas en fucsia (para que contraste bien ya que la mayoria de los pcb son verdes negros, rojo o azules)
        cv2.rectangle(img_pred, (x1, y1), (x2, y2), (255, 0, 0), 1)  # rojo
        cv2.putText(img_pred, pred_label, position, cv2.FONT_HERSHEY_SIMPLEX, 0.4, (255, 0, 255), 1)  # fucsia
        pred_labels_positions.append(position)  # Guardar posición de la etiqueta

    margin = 10
    combined_image = cv2.hconcat([img_true, cv2.copyMakeBorder(img_pred, 0, 0, margin, 0, cv2.BORDER_CONSTANT, value=[255, 255, 255])])
    save_path = os.path.join(output_path, f"resultado_{idx + 1}.jpg")
    cv2.imwrite(save_path, cv2.cvtColor(combined_image, cv2.COLOR_RGB2BGR))

    # Mostrar las imágenes verdadera y predicha una a una
    plt.figure(figsize=(30, 15))  
    plt.imshow(combined_image)
    plt.title("Etiquetas Verdaderas y Predichas")
    plt.axis("off")
    plt.show()
